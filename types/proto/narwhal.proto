// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package narwhal;

message CertificateDigest {
    bytes digest = 1;
}

message BatchDigest {
    bytes digest = 1;
}

message Batch {
    repeated Transaction transaction = 1;
}

message Transaction {
    bytes transaction = 1;
}

 enum CollectionErrorType {
    COLLECTION_NOT_FOUND = 0;
    COLLECTION_TIMEOUT = 1;
    COLLECTION_ERROR = 2;
}

message CollectionError {
    CertificateDigest id = 1;
    CollectionErrorType error = 2;
}

 message BatchMessage {
    BatchDigest id = 1;
    Batch transactions = 2;
}

message MultiAddr {
    string address = 1;
}

message PublicKey {
    bytes bytes = 1;
}

message ValidatorData {
    PublicKey public_key = 1;
    int64 stake_weight = 2;
    MultiAddr address = 3;
}

message CollectionRetrievalResult {
    oneof retrieval_result {
        BatchMessage batch = 1;
        CollectionError error = 2;
    }
}

message GetCollectionsRequest {
    // List of collections to be retreived.
    repeated CertificateDigest collection_ids = 1;
}

message GetCollectionsResponse {
    // TODO: Revisit this for spec compliance.  
    // List of retrieval results of collections.
    repeated CollectionRetrievalResult result = 1;
}

message RemoveCollectionsRequest {
    // List of collections to be removed.
    repeated CertificateDigest collection_ids = 1;
}

message NewNetworkInfoRequest {
    int32 epoch_number = 1;
    repeated ValidatorData validators = 2;
}

// A bincode encoded payload. This is intended to be used in the short-term
// while we don't have good protobuf definitions for Narwhal types
message BincodeEncodedPayload {
    bytes payload = 1;
  }
  
// Empty message for when we don't have anything to return
message Empty {
}

// The consensus to mempool interface for validator actions.
service Validator {
    // Returns the collection contents for each requested collection
    rpc GetCollections (GetCollectionsRequest) returns (GetCollectionsResponse);
    // Removes each provided collection.
    rpc RemoveCollections (RemoveCollectionsRequest) returns (Empty);
}

service Configuration {
    rpc NewNetworkInfo (NewNetworkInfoRequest) returns (Empty);
}

// The primary-to-primary interface
service PrimaryToPrimary {
  // Sends a message
  rpc SendMessage (BincodeEncodedPayload) returns (Empty) {}
}

// The worker-to-worker interface
service WorkerToWorker {
  // Sends a worker message
  rpc SendMessage (BincodeEncodedPayload) returns (Empty) {}
  // requests a number of batches that the service then streams back to the client
  rpc ClientBatchRequest (BincodeEncodedPayload) returns (stream BincodeEncodedPayload) {}
}

// The worker-to-primary interface
service WorkerToPrimary {
  // Sends a message
  rpc SendMessage (BincodeEncodedPayload) returns (Empty) {}
}

// The primary-to-worker interface
service PrimaryToWorker {
  // Sends a message
  rpc SendMessage (BincodeEncodedPayload) returns (Empty) {}
}

service Transactions {
    // Submit a Transactions
    rpc SubmitTransaction (Transaction) returns (Empty) {}

    // Submit a Transactions
    rpc SubmitTransactionStream (stream Transaction) returns (Empty) {}
}
