// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package narwhal;

message CertificateDigest {
    bytes digest = 1;
}

message BatchDigest {
    bytes digest = 1;
}

message Batch {
    repeated Transaction transaction = 1;
}

message Transaction {
    bytes transaction = 1;
}

enum CollectionErrorType {
    COLLECTION_NOT_FOUND = 0;
    COLLECTION_TIMEOUT = 1;
    COLLECTION_ERROR = 2;
}

message CollectionError {
    CertificateDigest id = 1;
    CollectionErrorType error = 2;
}

message BatchMessage {
    BatchDigest id = 1;
    Batch transactions = 2;
}

message PrimaryAddresses {
    MultiAddr primary_to_primary = 1;
    MultiAddr worker_to_primary = 2;
}

message MultiAddr {
    string address = 1;
}

message PublicKey {
    bytes bytes = 1;
}

message ValidatorData {
    PublicKey public_key = 1;
    int64 stake_weight = 2;
    PrimaryAddresses primary_addresses = 3;
}

message CollectionRetrievalResult {
    oneof retrieval_result {
        BatchMessage batch = 1;
        CollectionError error = 2;
    }
}

message GetCollectionsRequest {
    // List of collections to be retreived.
    repeated CertificateDigest collection_ids = 1;
}

message GetCollectionsResponse {
    // TODO: Revisit this for spec compliance.
    // List of retrieval results of collections.
    repeated CollectionRetrievalResult result = 1;
}

message RemoveCollectionsRequest {
    // List of collections to be removed.
    repeated CertificateDigest collection_ids = 1;
}

message ReadCausalRequest {
    // A collection for which a sequence of related collections are to be retrieved.
    CertificateDigest collection_id = 1;
}

message ReadCausalResponse {
    // Resulting sequence of collections from DAG walk.
    repeated CertificateDigest collection_ids = 1;
}

message RoundsRequest {
    /// The validator's key for which we want to retrieve
    /// the available rounds.
    PublicKey public_key = 1;
}

message RoundsResponse {
    /// The oldest round for which the node has available
    /// blocks to propose for the defined validator.
    uint64 oldest_round = 1;

    /// The newest (latest) round for which the node has available
    /// blocks to propose for the defined validator.
    uint64 newest_round = 2;
}

message NodeReadCausalRequest {
    PublicKey public_key = 1;
    uint64 round = 2;
}

message NodeReadCausalResponse {
    // Resulting sequence of collections from DAG walk.
    repeated CertificateDigest collection_ids = 1;
}

message NewNetworkInfoRequest {
    uint32 epoch_number = 1;
    repeated ValidatorData validators = 2;
}

message NewEpochRequest {
    uint32 epoch_number = 1;
    repeated ValidatorData validators = 2;
}

// A bincode encoded payload. This is intended to be used in the short-term
// while we don't have good protobuf definitions for Narwhal types
message BincodeEncodedPayload {
    bytes payload = 1;
}

// Empty message for when we don't have anything to return
message Empty {}

// The consensus to mempool interface for validator actions.
service Validator {
    // Returns collection contents for each requested collection.
    rpc GetCollections(GetCollectionsRequest) returns (GetCollectionsResponse);
    // Expunges collections from the mempool.
    rpc RemoveCollections(RemoveCollectionsRequest) returns (Empty);
    // Returns collections along a DAG walk with a well-defined starting point.
    rpc ReadCausal(ReadCausalRequest) returns (ReadCausalResponse);
}

/// The API that hosts the endpoints that should be used to help
/// proposing a block.
service Proposer {
    rpc Rounds(RoundsRequest) returns (RoundsResponse);
    // Returns the read_causal obtained by starting the DAG walk at the collection
    // proposed by the input authority (as indicated by their public key) at the input round
    rpc NodeReadCausal(NodeReadCausalRequest) returns (NodeReadCausalResponse);
}

service Configuration {
    // Signals a new epoch
    rpc NewEpoch(NewEpochRequest) returns (Empty);
    // Signals a change in networking info
    rpc NewNetworkInfo(NewNetworkInfoRequest) returns (Empty);
}

// The primary-to-primary interface
service PrimaryToPrimary {
    // Sends a message
    rpc SendMessage(BincodeEncodedPayload) returns (Empty) {}
}

// The worker-to-worker interface
service WorkerToWorker {
    // Sends a worker message
    rpc SendMessage(BincodeEncodedPayload) returns (Empty) {}
    // requests a number of batches that the service then streams back to the client
    rpc ClientBatchRequest(BincodeEncodedPayload) returns (stream BincodeEncodedPayload) {}
}

// The worker-to-primary interface
service WorkerToPrimary {
    // Sends a message
    rpc SendMessage(BincodeEncodedPayload) returns (Empty) {}
}

// The primary-to-worker interface
service PrimaryToWorker {
    // Sends a message
    rpc SendMessage(BincodeEncodedPayload) returns (Empty) {}
}

service Transactions {
    // Submit a Transactions
    rpc SubmitTransaction(Transaction) returns (Empty) {}

    // Submit a Transactions
    rpc SubmitTransactionStream(stream Transaction) returns (Empty) {}
}
